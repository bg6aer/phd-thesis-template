\chapter{Conclusions and Outlook}\label{conclusion}
In this last chapter we summarize the contribution of this thesis and discuss open issues and future challenges for the \WoTLong{}.

\section{Contributions}
In this thesis we presented an architecture focusing on enabling a participatory \WoT{} in which opportunistic applications can be easily created not only by embedded systems specialists but also by Web developers, tech-savvies and end-users.
First, we described the \WoTA{} and its four layers:

\begin{itemize}
 \item In the \devLayer{} we addressed the application interfaces that \sts{} should expose to realize a seamless Web integration. We proposed taking a Resource Oriented approach (with extensions such as push support) and described a methodology to implement RESTful Web APIs on \sts{} either directly or through small modular software applications called \sgs{}.

 \item In the \findLayer{} we proposed a simple model to describe \sts{} using metadata implemented by re-using widespread standards such as microformats. We further described a discovery and lookup infrastructure that can, for example, be deployed alongside with \sgs{}. This infrastructure discovers \sts{} at a Web layer and allows users to run distributed search queries to find adequate services to integrate in their composite applications. We further proposed extensions to the lookup infrastructure making searching for real-world services more efficient.

 \item In the \shareLayer{} we proposed an innovative architecture for sharing \sts{} and their services by leveraging social networks as well as Web authentication and authorization protocols. The architecture also acts as a federation of social networks accessible through a single API that can be used by end-users, applications or \sts{} to access resources in a uniform and secure manner.

 \item In the \compoLayer{} we contributed to making \pMashups{} possible by showing how a simple mashup editor could be adapted to support \sts{}. We further proposed an architecture enabling the implementation of domain specific \pMashups{}.
\end{itemize}

The architecture was implemented in several independent but interoperable services and frameworks. Furthermore, we evaluated the implementations in two domains:
\begin{itemize}
 \item We first studied Wireless Sensor Network platforms and applied the \WoTA{} to two of them: an energy sensing platform and a general purpose sensing platform.
 \item In a second phase, we applied the architecture to RFID and in particular to the EPC Network. 
\end{itemize}

For each domain, we evaluated the implementation first empirically by means of several prototypes and applications, then in quantitative terms with performance studies. Finally in qualitative terms in a user-study of the development experience as well as reports of experience from external developers who used our open-source software. Overall the results demonstrate that the \WoTA{} can significantly simplify the development of applications for these platforms.

\section{Discussion and Future Challenges}
This thesis takes an exploratory approach to the Web integration of \sts{}. Rather than focusing on one particular problem we looked at the bigger picture of this integration and tried to understand and experience its implications. As a consequence, the thesis provides a holistic view of this emerging domain but also emphasizes on several challenges instrumental to the realization of the \WoTLong{}. 

\paragraph{Pushing Web and Internet Standards Forward} First, although this thesis illustrates the suitability of Web standards and protocols for communicating real-world objects it also reveals their shortcomings. HTTP was designed as an architecture where clients initiate interactions and this model works fine for control-oriented \WoT{} applications. However, monitoring-oriented applications are often event-based and thus smart things should also be able to push data to clients (rather than being continuously polled). Using syndication protocols such as Atom and AtomPub improves the model for monitoring applications, since devices can publish asynchronously data using AtomPub on an intermediate server. Nevertheless clients still have to pull data from Atom servers. Adapting the client-server architecture of the Web to more real-time use-cases is now a core research topic. A domain in which Internet and \WoTLong{} researchers take an increasingly more important place. As a consequence, standards such as HTML5 are moving towards asynchronous bi-directional communication, e.g., with the Server Sent Events draft~\citeweb{server-sent} or HTML5 WebSockets~\citeweb{websockets} upon which we proposed a solution for the real-time \WoT{}. These initiatives emphasize on how relevant it is to further work on lightweight Web-based messaging systems.

Furthermore, while the presented \sg{} and LLDU approach for the integration of highly constrained devices has a number of advantages (e.g., scalability, caching, discovery and lookup services, device management, etc.), it also introduces application level (software) gateways which complexifies \WoT{} deployments. Hence, research on optimizing Internet and Web protocols for resource constrained devices is highly relevant. Projects such as 6LoWPAN, which adapt the IPv6 protocols to low power small footprint radio networks~\cite{Mulligan2007,Hui2008} are important research efforts towards this direction. Closer to the application layer, initiatives such as CoAP (Constrained Application Protocol)~\cite{Shelby2010} propose a new application protocol borrowing the core concepts of the Web (e.g., REST and HTTP) to better meet the needs of very constrained devices. While taking the approach of building alternative (Web) architectures to achieve fine-tuned optimizations might not be required anymore in a couple of years, these initiatives push forward the efforts towards end-to-end IP and Web networks of \sts{}. 

\paragraph{Deploying the \WoTLong{}}
In this thesis particular care was given to test the proposed architectures by building concrete prototypes and evaluating them with actual devices. However, most of these prototypes were deployed and evaluated in a lab environment (except for the Energie Visible prototype presented in \chapterRef{wsn}). More generally, there is a significant lack of large-scale real-world deployments for the \WoTLong{}, perhaps because the \WoT{} research community as defined in this thesis has only recently emerged. However, the vision behind the \WoTLong{} is to implement a global network of \sts{}. Hence, future work should also focus on larger deployments of the developed concepts and technologies that will certainly raise challenging issues but also perhaps make an even stronger point for using Web standards.
Efforts should also be made to bring these technologies closer to real-world use-cases and to the business. Towards this aim we open-sourced several of the software components that were presented in this thesis and they are increasingly being used by third-parties to implement their particular use-cases. In this direction, strategic alliances such as the IPSO (IP for Smart Objects)~\citeweb{ipso} work on the industrial dissemination of the Internet and \WoTLong{} and emphasize the relevance of these topics outside of academic research.

\paragraph{Freeing the Social \WoT{}} The recent emergence of a Social \WoTLong{} offers some unprecedented opportunities to use social connections and their underlying social graphs to share digital artifacts and make them more socially aware. The \shareLayer{} of this thesis only scratches the surface of applications enabled by bridging the gap between social networks and networks of objects. Object to object communication, objects to people communication and actuation of the physical world based on processing social event streams are just a few examples that are increasingly being explored.  However, \WoT{} applications leveraging social networks also face important challenges. First, applications built using social network APIs are also strongly coupled with the social network platforms, and so are their users. Additionally, social networks APIs offer different functionalities, therefore it is difficult to group them under a single common denominator. Several initiatives attempt to solve these problems such as the OpenSocial standards presented before. Initially started by Google, many social networks such as Orkut, Linkedin, Netlog, Yahoo!, Hi5, Myspace and many others have also joined and implemented the standards in their APIs. However, while the initiative has a lot of potential, the current implementations are not entirely homogeneous yet and still under construction for most of them. Moreover, some of the major social networks do not comply with OpenSocial as of today, most likely due to the strategic implications of such standards~\citeweb{BernersLee-WalledGardens}.

Once \sts{} increasingly blend with social networks, these challenges will have important consequences, and hence it is highly relevant for researchers to work on preventing users from social networks lock-in. Our implementation of the \sacLong{} supporting several social networks and offering a unified access to their basic data is a step towards this direction but research should further explore the notion of meta social networks for the \WoT{}. Furthermore, ensuring portability of users or things-generated data will be a significant and necessary step to move towards a truly open and interoperable Social \WoTLong{}.

\paragraph{Increasing the Intelligence} The \findLayer{} presented in this thesis is a first step towards more intelligence on top of the \WoT{}. However, it raises a number of issues and paves the way for future work. First, the presented approach enables users to search for \sts{} as well as the automatic generation of mashup building-blocks. It does not, however, enable a complete and dynamic thing to thing service discovery where \sts{} can use and understand each others services in an entirely automated way. The automatic mashability of the physical world is thus yet to be implemented and has been on the agenda of researchers for several years already. 

Furthermore, this thesis and most of the current research in the \WoT{} has been focusing on accessibility: Making \sts{} accessible and enabling cross-integration with other devices and services on the Web. One of the natural follow-ups of this research is intelligence and reasoning: Given the fact that \sts{} sense the physical world, how do we develop, in an open and loosely-coupled way, frameworks, languages and algorithms that extract meaning from -- and react upon -- these valuable streams of sensed data? 

\paragraph{Final Thoughts} This thesis illustrates how introducing support for Web standards at the device-level (in a direct or \sgs{} mediated way) is beneficial for developing a new generation of networked devices that are much simpler to deploy, program, and reuse. We illustrate how applying the design principles that supported the success of the Web and in particular openness, connectedness and simplicity can significantly ease the development process on top of \sts{}. Thanks to the wide-spread deployments of Web browsers (e.g., in desktop computers, mobile phones, machines, modern home appliances, etc.), and to the ubiquitous HTTP support in programming and scripting languages, we tap into very large communities (e.g., Web developers) as potential application developers for the \WoT{}. Furthermore, with \pMashups{} we demonstrated how tech-savvies and end-users are given the power to develop small but tailored applications on top of \sts{}. As a consequence, we believe that the \WoTA{} has the potential to foster open public innovation, leading to an increasing number of interesting applications involving \sts{}.

In this thesis, we demonstrate the fact that the \WoTLong{} is interesting not only because it forces \sts{} to all understand the same basic and interoperable standards but also because it significantly eases the direct integration of \sts{} with an impressive number of services on the Web: Composition tools, visualization APIs, distributed data-stores, app-stores, cloud infrastructures, social networks, (micro) blogging services, search engines, etc. Through the presented architecture \sts{} become seamlessly part of the programmable, real-time, semantic and social Web.